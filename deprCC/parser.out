Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> module
Rule 1     module -> statement-list
Rule 2     statement-list -> statement statement-list
Rule 3     statement-list -> statement
Rule 4     statement-list -> empty
Rule 5     statement -> expression
Rule 6     statement -> PRINT expression
Rule 7     statement -> assName expression
Rule 8     expression -> ID
Rule 9     expression -> INT
Rule 10    expression -> UNARY_SUB expression
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> LPAREN expression RPAREN
Rule 13    expression -> INPUT
Rule 14    assName -> ID ASSIGN
Rule 15    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 14
ID                   : 8 14
INPUT                : 13
INT                  : 9
LPAREN               : 12
PLUS                 : 11
PRINT                : 6
RPAREN               : 12
UNARY_SUB            : 10
error                : 

Nonterminals, with rules where they appear

assName              : 7
empty                : 4
expression           : 5 6 7 10 11 11 12
module               : 0
statement            : 2 3
statement-list       : 1 2

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . statement-list
    (2) statement-list -> . statement statement-list
    (3) statement-list -> . statement
    (4) statement-list -> . empty
    (5) statement -> . expression
    (6) statement -> . PRINT expression
    (7) statement -> . assName expression
    (15) empty -> .
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT
    (14) assName -> . ID ASSIGN

    PRINT           shift and go to state 8
    $end            reduce using rule 15 (empty -> .)
    ID              shift and go to state 11
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    statement-list                 shift and go to state 2
    module                         shift and go to state 4
    assName                        shift and go to state 6
    statement                      shift and go to state 7
    expression                     shift and go to state 10
    empty                          shift and go to state 12

state 1

    (12) expression -> LPAREN . expression RPAREN
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT

    ID              shift and go to state 14
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    expression                     shift and go to state 13

state 2

    (1) module -> statement-list .

    $end            reduce using rule 1 (module -> statement-list .)


state 3

    (9) expression -> INT .

    PLUS            reduce using rule 9 (expression -> INT .)
    PRINT           reduce using rule 9 (expression -> INT .)
    ID              reduce using rule 9 (expression -> INT .)
    INT             reduce using rule 9 (expression -> INT .)
    UNARY_SUB       reduce using rule 9 (expression -> INT .)
    LPAREN          reduce using rule 9 (expression -> INT .)
    INPUT           reduce using rule 9 (expression -> INT .)
    $end            reduce using rule 9 (expression -> INT .)
    RPAREN          reduce using rule 9 (expression -> INT .)


state 4

    (0) S' -> module .



state 5

    (10) expression -> UNARY_SUB . expression
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT

    ID              shift and go to state 14
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    expression                     shift and go to state 15

state 6

    (7) statement -> assName . expression
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT

    ID              shift and go to state 14
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    expression                     shift and go to state 16

state 7

    (2) statement-list -> statement . statement-list
    (3) statement-list -> statement .
    (2) statement-list -> . statement statement-list
    (3) statement-list -> . statement
    (4) statement-list -> . empty
    (5) statement -> . expression
    (6) statement -> . PRINT expression
    (7) statement -> . assName expression
    (15) empty -> .
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT
    (14) assName -> . ID ASSIGN

  ! reduce/reduce conflict for $end resolved using rule 3 (statement-list -> statement .)
    $end            reduce using rule 3 (statement-list -> statement .)
    PRINT           shift and go to state 8
    ID              shift and go to state 11
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

  ! $end            [ reduce using rule 15 (empty -> .) ]

    assName                        shift and go to state 6
    empty                          shift and go to state 12
    expression                     shift and go to state 10
    statement-list                 shift and go to state 17
    statement                      shift and go to state 7

state 8

    (6) statement -> PRINT . expression
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT

    ID              shift and go to state 14
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    expression                     shift and go to state 18

state 9

    (13) expression -> INPUT .

    PLUS            reduce using rule 13 (expression -> INPUT .)
    PRINT           reduce using rule 13 (expression -> INPUT .)
    ID              reduce using rule 13 (expression -> INPUT .)
    INT             reduce using rule 13 (expression -> INPUT .)
    UNARY_SUB       reduce using rule 13 (expression -> INPUT .)
    LPAREN          reduce using rule 13 (expression -> INPUT .)
    INPUT           reduce using rule 13 (expression -> INPUT .)
    $end            reduce using rule 13 (expression -> INPUT .)
    RPAREN          reduce using rule 13 (expression -> INPUT .)


state 10

    (5) statement -> expression .
    (11) expression -> expression . PLUS expression

    PRINT           reduce using rule 5 (statement -> expression .)
    ID              reduce using rule 5 (statement -> expression .)
    INT             reduce using rule 5 (statement -> expression .)
    UNARY_SUB       reduce using rule 5 (statement -> expression .)
    LPAREN          reduce using rule 5 (statement -> expression .)
    INPUT           reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    PLUS            shift and go to state 19


state 11

    (8) expression -> ID .
    (14) assName -> ID . ASSIGN

    PLUS            reduce using rule 8 (expression -> ID .)
    PRINT           reduce using rule 8 (expression -> ID .)
    ID              reduce using rule 8 (expression -> ID .)
    INT             reduce using rule 8 (expression -> ID .)
    UNARY_SUB       reduce using rule 8 (expression -> ID .)
    LPAREN          reduce using rule 8 (expression -> ID .)
    INPUT           reduce using rule 8 (expression -> ID .)
    $end            reduce using rule 8 (expression -> ID .)
    ASSIGN          shift and go to state 20


state 12

    (4) statement-list -> empty .

    $end            reduce using rule 4 (statement-list -> empty .)


state 13

    (12) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . PLUS expression

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 19


state 14

    (8) expression -> ID .

    PLUS            reduce using rule 8 (expression -> ID .)
    PRINT           reduce using rule 8 (expression -> ID .)
    ID              reduce using rule 8 (expression -> ID .)
    INT             reduce using rule 8 (expression -> ID .)
    UNARY_SUB       reduce using rule 8 (expression -> ID .)
    LPAREN          reduce using rule 8 (expression -> ID .)
    INPUT           reduce using rule 8 (expression -> ID .)
    $end            reduce using rule 8 (expression -> ID .)
    RPAREN          reduce using rule 8 (expression -> ID .)


state 15

    (10) expression -> UNARY_SUB expression .
    (11) expression -> expression . PLUS expression

    PLUS            reduce using rule 10 (expression -> UNARY_SUB expression .)
    PRINT           reduce using rule 10 (expression -> UNARY_SUB expression .)
    ID              reduce using rule 10 (expression -> UNARY_SUB expression .)
    INT             reduce using rule 10 (expression -> UNARY_SUB expression .)
    UNARY_SUB       reduce using rule 10 (expression -> UNARY_SUB expression .)
    LPAREN          reduce using rule 10 (expression -> UNARY_SUB expression .)
    INPUT           reduce using rule 10 (expression -> UNARY_SUB expression .)
    $end            reduce using rule 10 (expression -> UNARY_SUB expression .)
    RPAREN          reduce using rule 10 (expression -> UNARY_SUB expression .)

  ! PLUS            [ shift and go to state 19 ]


state 16

    (7) statement -> assName expression .
    (11) expression -> expression . PLUS expression

    PRINT           reduce using rule 7 (statement -> assName expression .)
    ID              reduce using rule 7 (statement -> assName expression .)
    INT             reduce using rule 7 (statement -> assName expression .)
    UNARY_SUB       reduce using rule 7 (statement -> assName expression .)
    LPAREN          reduce using rule 7 (statement -> assName expression .)
    INPUT           reduce using rule 7 (statement -> assName expression .)
    $end            reduce using rule 7 (statement -> assName expression .)
    PLUS            shift and go to state 19


state 17

    (2) statement-list -> statement statement-list .

    $end            reduce using rule 2 (statement-list -> statement statement-list .)


state 18

    (6) statement -> PRINT expression .
    (11) expression -> expression . PLUS expression

    PRINT           reduce using rule 6 (statement -> PRINT expression .)
    ID              reduce using rule 6 (statement -> PRINT expression .)
    INT             reduce using rule 6 (statement -> PRINT expression .)
    UNARY_SUB       reduce using rule 6 (statement -> PRINT expression .)
    LPAREN          reduce using rule 6 (statement -> PRINT expression .)
    INPUT           reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    PLUS            shift and go to state 19


state 19

    (11) expression -> expression PLUS . expression
    (8) expression -> . ID
    (9) expression -> . INT
    (10) expression -> . UNARY_SUB expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INPUT

    ID              shift and go to state 14
    INT             shift and go to state 3
    UNARY_SUB       shift and go to state 5
    LPAREN          shift and go to state 1
    INPUT           shift and go to state 9

    expression                     shift and go to state 22

state 20

    (14) assName -> ID ASSIGN .

    ID              reduce using rule 14 (assName -> ID ASSIGN .)
    INT             reduce using rule 14 (assName -> ID ASSIGN .)
    UNARY_SUB       reduce using rule 14 (assName -> ID ASSIGN .)
    LPAREN          reduce using rule 14 (assName -> ID ASSIGN .)
    INPUT           reduce using rule 14 (assName -> ID ASSIGN .)


state 21

    (12) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    UNARY_SUB       reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (expression -> LPAREN expression RPAREN .)


state 22

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression

    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 11 (expression -> expression PLUS expression .)
    ID              reduce using rule 11 (expression -> expression PLUS expression .)
    INT             reduce using rule 11 (expression -> expression PLUS expression .)
    UNARY_SUB       reduce using rule 11 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 11 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 19 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 7 resolved using rule (statement-list -> statement)
WARNING: rejected rule (empty -> <empty>) in state 7
